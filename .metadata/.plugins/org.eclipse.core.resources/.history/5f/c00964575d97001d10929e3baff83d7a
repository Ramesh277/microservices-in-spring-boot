package com.micro_user.UserServiceImpl;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.micro_user.Repository.UserRepository;
import com.micro_user.exception.ResourceNotFoundException;
import com.micro_user.external.HotelService;
import com.micro_user.model.Hotel;
import com.micro_user.model.Rating;
import com.micro_user.model.User;
import com.micro_user.service.UserService;


@Service
public class UserServiceImpl implements UserService{
	
	@Autowired
	private UserRepository userRepository;
	
	
	//that copy data from the other services 
	@Autowired
	private RestTemplate restTemplate;
	
	
	private static org.slf4j.Logger logger =  LoggerFactory.getLogger(UserServiceImpl.class);

	
	//hotel service using feign cliet 
	
	@Autowired
	private HotelService hotelService;
	
	
	@Override
	public User saveUser(User user) {
		
//		generated unique user id
		String randomuid = UUID.randomUUID().toString();		
		user.setId(randomuid);		
		
		return this.userRepository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		
		return this.userRepository.findAll();
	}
	
//get single user
	@Override
	public User getuser(String id) {
		
		//get user from database with help of userRepository
		
		User user = userRepository.findById(id).orElseThrow(()-> 
		new ResourceNotFoundException("User is not fond is the Given Id  ?? "+id));
		
		//fetch rating of the above user from rating 
		//http://localhost:8083/ratings/user/70cb2544-ace0-4757-be69-385fbf824e9e
		
		Rating[] ratingOfuser = this.restTemplate.getForObject("http://RATING-SERVICE/ratings/user/"+user.getId(), Rating[].class);
		logger.info("{}  ",ratingOfuser);
		
		
		List<Rating> ratings = Arrays.stream(ratingOfuser).toList();
		
		List<Rating> ratingList = ratings.stream().map( rating ->{
			//api call to hotel service to get the hotel
			
            //http://localhost:8082/hotels/530a921c-1fdf-4c85-8456-4aaf541210a5
			
			//ResponseEntity<Hotel> hotel = this.restTemplate.getForEntity("http://HOTEL-SERVICE/hotels/"+rating.getHotelId(), Hotel.class);
			//Hotel hotel1 = hotel.getBody();
			Hotel hotel1 = hotelService.getHotel(rating.getHotelId());
			//logger.info("Repnse Status code ",hotel.getStatusCode());
			
			
			//set the hotel to rating 
			rating.setHotel(hotel1);
			//return the rating 
			return rating;
		}).collect(Collectors.toList());
		
		user.setRatings(ratings);
		
		return user;
	}

}
